plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.flywaydb.flyway' version '6.4.4'
    id 'nu.studer.jooq' version '4.2'
}

group 'io.agibalov'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

wrapper {
    gradleVersion = '6.3'
}

ext['jooq.version'] = '3.13.1'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.flywaydb:flyway-core'
    implementation 'mysql:mysql-connector-java:8.0.20'
    jooqRuntime 'mysql:mysql-connector-java:8.0.20'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

jooq {
    version = '3.13.1'
    edition = 'OSS'
    generateSchemaSourceOnCompilation = false
    db(sourceSets.main) {
        jdbc {
            url = 'jdbc:mysql://localhost:3308/db1'
            user = 'user1'
            password = 'password1'
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.KeepNamesGeneratorStrategy'
            }

            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'db1'
                outputSchemaToDefault = true
                excludes = 'flyway_schema_history'
            }

            generate {
                records = true
                relations = true
            }

            target {
                packageName = 'io.agibalov.db'
                directory = 'src/jooq/java'
            }
        }
    }
}

test {
    useJUnitPlatform()

    testLogging {
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat = 'full'
        events 'failed', 'passed', 'skipped', 'started'
    }

    beforeTest {
        logger.lifecycle('*' * 60)
    }

    onOutput { descriptor, event ->
        String message = event.message
        logger.lifecycle(message.substring(0, message.length() - 1))
    }

    environment 'SPRING_PROFILES_ACTIVE', getEnvOrDefault('SPRING_PROFILES_ACTIVE', 'test')
    environment 'TEST_MYSQL_HOST', getEnvOrDefault('TEST_MYSQL_HOST', 'localhost')
    environment 'TEST_MYSQL_PORT', getEnvOrDefault('TEST_MYSQL_PORT', '3308')
    environment 'TEST_MYSQL_ROOT_USERNAME', getEnvOrDefault('TEST_MYSQL_ROOT_USERNAME', 'root')
    environment 'TEST_MYSQL_ROOT_PASSWORD', getEnvOrDefault('TEST_MYSQL_ROOT_PASSWORD', 'qwerty')
    environment 'TEST_MYSQL_DATABASE', getEnvOrDefault('TEST_MYSQL_DATABASE', 'testdb')
    environment 'TEST_MYSQL_USERNAME', getEnvOrDefault('TEST_MYSQL_USERNAME', 'testuser')
    environment 'TEST_MYSQL_PASSWORD', getEnvOrDefault('TEST_MYSQL_PASSWORD', 'testpassword')
}

def getEnvOrDefault(String key, String defaultValue) {
    return System.getenv().getOrDefault(key, defaultValue);
}
