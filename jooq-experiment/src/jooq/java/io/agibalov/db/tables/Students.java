/*
 * This file is generated by jOOQ.
 */
package io.agibalov.db.tables;


import io.agibalov.db.DefaultSchema;
import io.agibalov.db.Indexes;
import io.agibalov.db.Keys;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Students extends TableImpl<io.agibalov.db.tables.records.Students> {

    private static final long serialVersionUID = 847846744;

    /**
     * The reference instance of <code>Students</code>
     */
    public static final Students Students = new Students();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<io.agibalov.db.tables.records.Students> getRecordType() {
        return io.agibalov.db.tables.records.Students.class;
    }

    /**
     * The column <code>Students.id</code>.
     */
    public final TableField<io.agibalov.db.tables.records.Students, String> id = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>Students.schoolId</code>.
     */
    public final TableField<io.agibalov.db.tables.records.Students, String> schoolId = createField(DSL.name("schoolId"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>Students.name</code>.
     */
    public final TableField<io.agibalov.db.tables.records.Students, String> name = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>Students</code> table reference
     */
    public Students() {
        this(DSL.name("Students"), null);
    }

    /**
     * Create an aliased <code>Students</code> table reference
     */
    public Students(String alias) {
        this(DSL.name(alias), Students);
    }

    /**
     * Create an aliased <code>Students</code> table reference
     */
    public Students(Name alias) {
        this(alias, Students);
    }

    private Students(Name alias, Table<io.agibalov.db.tables.records.Students> aliased) {
        this(alias, aliased, null);
    }

    private Students(Name alias, Table<io.agibalov.db.tables.records.Students> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Students(Table<O> child, ForeignKey<O, io.agibalov.db.tables.records.Students> key) {
        super(child, key, Students);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.schoolId);
    }

    @Override
    public UniqueKey<io.agibalov.db.tables.records.Students> getPrimaryKey() {
        return Keys.KEY_Students_PRIMARY;
    }

    @Override
    public List<UniqueKey<io.agibalov.db.tables.records.Students>> getKeys() {
        return Arrays.<UniqueKey<io.agibalov.db.tables.records.Students>>asList(Keys.KEY_Students_PRIMARY);
    }

    @Override
    public List<ForeignKey<io.agibalov.db.tables.records.Students, ?>> getReferences() {
        return Arrays.<ForeignKey<io.agibalov.db.tables.records.Students, ?>>asList(Keys.Students_ibfk_1);
    }

    public Schools Students_ibfk_1() {
        return new Schools(this, Keys.Students_ibfk_1);
    }

    @Override
    public Students as(String alias) {
        return new Students(DSL.name(alias), this);
    }

    @Override
    public Students as(Name alias) {
        return new Students(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(String name) {
        return new Students(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Name name) {
        return new Students(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
