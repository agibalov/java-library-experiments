/*
 * This file is generated by jOOQ.
 */
package io.agibalov.db.tables;


import io.agibalov.db.DefaultSchema;
import io.agibalov.db.Keys;
import io.agibalov.db.tables.records.SchoolsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Schools extends TableImpl<SchoolsRecord> {

    private static final long serialVersionUID = 2098494022;

    /**
     * The reference instance of <code>Schools</code>
     */
    public static final Schools SCHOOLS = new Schools();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchoolsRecord> getRecordType() {
        return SchoolsRecord.class;
    }

    /**
     * The column <code>Schools.id</code>.
     */
    public final TableField<SchoolsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>Schools.name</code>.
     */
    public final TableField<SchoolsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>Schools</code> table reference
     */
    public Schools() {
        this(DSL.name("Schools"), null);
    }

    /**
     * Create an aliased <code>Schools</code> table reference
     */
    public Schools(String alias) {
        this(DSL.name(alias), SCHOOLS);
    }

    /**
     * Create an aliased <code>Schools</code> table reference
     */
    public Schools(Name alias) {
        this(alias, SCHOOLS);
    }

    private Schools(Name alias, Table<SchoolsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Schools(Name alias, Table<SchoolsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Schools(Table<O> child, ForeignKey<O, SchoolsRecord> key) {
        super(child, key, SCHOOLS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SchoolsRecord> getPrimaryKey() {
        return Keys.KEY_SCHOOLS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SchoolsRecord>> getKeys() {
        return Arrays.<UniqueKey<SchoolsRecord>>asList(Keys.KEY_SCHOOLS_PRIMARY);
    }

    @Override
    public Schools as(String alias) {
        return new Schools(DSL.name(alias), this);
    }

    @Override
    public Schools as(Name alias) {
        return new Schools(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Schools rename(String name) {
        return new Schools(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Schools rename(Name name) {
        return new Schools(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
